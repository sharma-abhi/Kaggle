na_age_pred6 <- predict(fit6, train.na[,-4])
na_age_Ensemble_df <- data.frame(pStep=na_age_pred5, pForest=na_age_pred6)
age_predictions <- predict(fit8, na_age_Ensemble_df)
na_age_Ensemble_df
sum(age_predictions < 0)
train$Age[na_Age] <- age_predictions
summary(train)
str(train)
library(ggplot2)
library(gridExtra)
ggplot(data=train, aes(Survived)) + geom_histogram(binwidth=0.5) +
ggtitle("Fig.1: Histogram of Survivality")
table(train$Survived)
prop.table(table(train$Survived))
ggplot(data=train, aes(x=Age, y=Sex, color=Survived)) +
geom_point(position="jitter") +
ggtitle("Fig.2: Comparision of Survivality by Age and Sex") +
xlab("Age (in years)")
table(train$Sex, train$Survived)
prop.table(table(train$Sex, train$Survived),1)
ggplot(data=train, aes(x=SibSp, y=Age, color=Survived)) +
geom_point(position="jitter") +
ggtitle("Fig.3: Comparision of Survivality by Age and Sex") +
xlab("No. of Siblings") + ylab("Age (in years)")
library(scales)
ggplot(data=train, aes(x=SibSp, fill=Survived)) +
geom_bar(aes(y=(..count..)/sum(..count..))) +
scale_y_continuous(labels=percent) +
ggtitle("Fig.4: Percentage plot of no.of Siblings/Spouse and Survivality") +
xlab("Percentage of counts") + ylab("No. of Siblings")
ggplot(train, aes(x=SibSp, fill=Survived)) + geom_bar(position="fill") +
ggtitle("Fig.5: Relative Frequencies of no.of Siblings/Spouse and Survivality") +
xlab("No. of Siblings")
train$AgeGroup <- cut(train$Age, breaks = c(0, 8, 13, 18, 60, Inf), labels = c("Child", "Teenager", "Young Adult", "Adult", "Elder"), right=FALSE)
prop.table(table(train$AgeGroup, train$Survived),1)
ggplot(train, aes(x=AgeGroup, fill=Survived)) + geom_bar(position="fill") +
ggtitle("Fig.5: Relative Frequencies of no.of Siblings/Spouse and Survivality") +
xlab("No. of Siblings")
ggplot(train, aes(x=AgeGroup, fill=Survived)) + geom_bar() +
ggtitle("Fig.5: Relative Frequencies of no.of Siblings/Spouse and Survivality") +
xlab("No. of Siblings")
ggplot(data=train, aes(AgeGroup, fill=Survived)) + geom_histogram(binwidth=1)
head(train)
library(caret)
train <- subset(train, select=-AgeGroup)
set.seed(123) # setting seed for reproducibility
# We first divide the training set into two parts in 60:40 ratio.
inTrain <- createDataPartition(y=train$Survived, p = 0.6, list=FALSE)
training.train <- train[inTrain,]
rest_train <- train[-inTrain,]
set.seed(123) # setting seed for reproducibility
# We now divide the rest of the training set into two parts in 50:50 ratio.
# This splits the original training set in a 60:20:20 ratio.
inTest <- createDataPartition(y=rest_train$Survived, p = 0.5, list=FALSE)
# 20% data for validation set to select best classifier
training.classifier_valid <- rest_train[inTest,]
# 20% data for validation set to calculate out-of-sample errors
training.oos_valid <- rest_train[-inTest,]
# data_labels <- c("Train", "Validate", "Test")
# per_data_point_label <- sample(data_labels, size=nrow(train),
#                                replace=TRUE, prob=c(0.6, 0.2, 0.2))
# training.train <- train[per_data_point_label == "Train",]
# training.classifier_valid <- train[per_data_point_label == "Validate",]
# training.oos_valid <- train[per_data_point_label == "Test",]
head(train)
library(klaR)
par(mfrow=c(1,1))
# Decision Trees
set.seed(123)
tree_Model <- train(Survived ~ ., data=training.train, method="rpart")
pred_Tree <- predict(tree_Model, newdata=training.classifier_valid[,-1])
conf_Tree <- confusionMatrix(pred_Tree, training.classifier_valid$Survived)
# Decision Tree Plot
library(rattle)
fancyRpartPlot(tree_Model$finalModel)
set.seed(123)
forest_Model <- train(Survived ~ ., data=training.train, method="rf")
pred_Forest <- predict(forest_Model, newdata=training.classifier_valid[,-1])
conf_Forest <- confusionMatrix(pred_Forest, training.classifier_valid$Survived)
set.seed(123)
naiveB_Model <- NaiveBayes(Survived ~ ., data=training.train)
pred_naiveB <- predict(naiveB_Model, newdata=training.classifier_valid[,-1])
conf_naiveB <- confusionMatrix(pred_naiveB$class, training.classifier_valid$Survived)
df_Ensemble <- data.frame(pTree=pred_Tree, pForest=pred_Forest,
pNaive=pred_naiveB$class,
Survived=training.classifier_valid$Survived)
set.seed(123)
ensemble_Model <- train(Survived ~., method="gbm", data=df_Ensemble)
pred_Ensemble <- predict(ensemble_Model, df_Ensemble[,-4])
conf_Ensemble <- confusionMatrix(pred_Ensemble, df_Ensemble$Survived)
set.seed(123)
boost_Model <- train(Survived ~., method="gbm", data=training.train)
pred_Boost <- predict(boost_Model, newdata=training.classifier_valid[,-1])
conf_Boost <- confusionMatrix(pred_Boost, training.classifier_valid$Survived)
compare_df <- data.frame(Accuracy = c(conf_Tree$overall[1],
conf_Forest$overall[1],
conf_naiveB$overall[1],
conf_Ensemble$overall[1],
conf_Boost$overall[1]),
row.names = c("rpart", "rf", "NaiveB", "Ensemble", "Boost"))
compare_df
pred_Tree_oos <- predict(tree_Model, newdata=training.oos_valid[,-1])
conf_Tree_oos <- confusionMatrix(pred_Tree_oos, training.oos_valid$Survived)
pred_Forest_oos <- predict(forest_Model, newdata=training.oos_valid[,-1])
conf_Forest_oos <- confusionMatrix(pred_Forest_oos, training.oos_valid$Survived)
pred_naiveB_oos <- predict(naiveB_Model, newdata=training.oos_valid[,-1])
conf_naiveB_oos <- confusionMatrix(pred_naiveB_oos$class, training.oos_valid$Survived)
df_ensemble_oos <- data.frame(pTree=pred_Tree_oos, pForest=pred_Forest_oos,
pNaive=pred_naiveB_oos$class,
Survived=training.oos_valid$Survived)
pred_Ensemble_oos <- predict(ensemble_Model, df_ensemble_oos[,-4])
conf_Ensemble_oos <- confusionMatrix(pred_Ensemble_oos, df_ensemble_oos$Survived)
pred_Boost_oos <- predict(boost_Model, newdata=training.oos_valid[,-1])
conf_Boost_oos <- confusionMatrix(pred_Boost_oos, training.oos_valid$Survived)
compare_df_oos <- data.frame(Accuracy = c(conf_Tree_oos$overall[1],
conf_Forest_oos$overall[1],
conf_naiveB_oos$overall[1],
conf_Ensemble_oos$overall[1],
conf_Boost_oos$overall[1]),
row.names = c("rpart", "rf", "NaiveB", "Ensemble", "Boost"))
compare_df_oos
head(training.train)
first_name <- gsub("[A-Za-z '-]*, ", "", test$Name)
first_name <- gsub("[A-Za-z '-]*, ", "", inp_test)
Title <- gsub("[. *] .*","",first_name)
View(data.frame(inp_test$Name, gsub("[A-Za-z '-]*, ", "", inp_test$Name), gsub("[. *] .*","",gsub("[A-Za-z '-]*, ", "", inp_test$Name))))
test <- inp_test
test$Title <- as.factor(Title)
test <- subset(test, select = -c(Name, Ticket, Cabin))
head(test)
Title
first_name
head(test)
first_name <- gsub("[A-Za-z '-]*, ", "", inp_test)
first_name
View(data.frame(inp_test$Name, gsub("[A-Za-z '-]*, ", "", inp_test$Name), gsub("[. *] .*","",gsub("[A-Za-z '-]*, ", "", inp_test$Name))))
head(inp_test)
first_name <- gsub("[A-Za-z '-]*, ", "", inp_test$Name)
first_name
Title <- gsub("[. *] .*","",first_name)
test <- inp_test
test$Title <- as.factor(Title)
head(test)
test <- subset(test, select = -c(Name, Ticket, Cabin))
test$Pclass <- factor(test$Pclass)
test$Sex <- factor(test$Sex)
test$Embarked <- factor(test$Embarked)
test$Fare[which(is.na(test$Fare))] <- 0
na_Age <- which(is.na(test$Age))
test.na <- test[na_Age,]
head(test.na)
test_na_age_pred5 <- predict(fit5, test.na[,-c(1,4)])
test_na_age_pred6 <- predict(fit6, test.na[,-c(1,4)])
test_na_age_Ensemble_df <- data.frame(pStep=test_na_age_pred5,
pForest=test_na_age_pred6)
test_age_predictions <- predict(fit8, test_na_age_Ensemble_df)
test$Age[na_Age] <- test_age_predictions
head(test)
summary(test)
str(test)
unique(test$Title)
unique(train$Title)
head(test)
sum(test_age_predictions < 0)
set.seed(123)
forest_Model <- train(Survived ~ ., data=train, method="rf")
pred_Forest_test <- predict(forest_Model, newdata=test)
table(train$Title, train$Sex)
Title[Title=="Col"]
Title[Title=="Col"] <- "Army"
Title[Title=="Col"]
Title[Title=="Army"]
Title
unique(Title)
unique(Train$Title)
unique(train$Title)
table(train$Title, train$Sex)
table(train$Title, train$Sex, train$Survived)
table(train$Title, train$Sex, train$Survived)
prop.table(table(train$Title, train$Sex, train$Survived), 1)
prop.table(table(train$Title, train$Sex, train$Survived), 1)
Title[Title=="Col" or Title=="Capt" or Title=="Major"] <- "Army"
Title[Title=="Sir" or Title=="Don" or Title=="Dona" or Title=="the Countess"] <- "Royal"
Title[Title=="Rev"] <- "Priest"
Title[Title=="Dr"] <- "Doctor"
unique(train$Title)
unique(test$Title)
Title[Title=="Col" || Title=="Capt" || Title=="Major"] <- "Army"
Title[Title=="Sir"|| Title=="Don" || Title=="Jonkheer" || Title=="Dona" ||
Title=="the Countess"] <- "Royal"
Title[Title=="Rev"] <- "Priest"
Title[Title=="Dr"] <- "Doctor"
first_name <- gsub("[A-Za-z '-]*, ", "", train$Name)
Title <- gsub("[. *] .*","",first_name)
prop.table(table(train$Title, train$Sex, train$Survived), 1)
train$Title <- as.factor(Title)
Title[Title=="Col" || Title=="Capt" || Title=="Major"] <- "Army"
Title[Title=="Sir"|| Title=="Don" || Title=="Jonkheer" || Title=="Dona" ||
Title=="the Countess"] <- "Royal"
Title[Title=="Rev"] <- "Priest"
Title[Title=="Dr"] <- "Doctor"
unique(Title)
Title
rm(list=ls())
path <- "C://Users//Abhijeet//Documents//GitHub//Kaggle//Titanic_Machine_Learning_from_Disaster//My Implementation"
if (getwd() != path) {setwd(path)}
# Step 1
## Fetching data from the training and testing datasets
inp_train <- read.csv(file="data/train.csv", header=TRUE, sep=",", quote="\"",
stringsAsFactors=FALSE, na.strings=c("NA",""))
inp_test <- read.csv(file="data/test.csv", header=TRUE, sep=",", quote="\"",
stringsAsFactors=FALSE, na.strings=c("NA",""))
train <-  subset(inp_train, select= -c(PassengerId))
# There are some columns which are more meaningful if we convert them to factors.
train$Survived <- factor(train$Survived, levels = c("0", "1"),
labels = c("Not_Survived", "Survived"))
train$Pclass <- factor(train$Pclass)
train$Sex <- factor(train$Sex)
train$Embarked <- factor(train$Embarked)
first_name <- gsub("[A-Za-z '-]*, ", "", train$Name)
Title <- gsub("[. *] .*","",first_name)
prop.table(table(train$Title, train$Sex, train$Survived), 1)
prop.table(table(Title, train$Sex, train$Survived), 1)
train$Title <- as.factor(Title)
path <- "C://Users//Abhijeet//Documents//GitHub//Kaggle//Titanic_Machine_Learning_from_Disaster//My Implementation"
if (getwd() != path) {setwd(path)}
# Step 1
## Fetching data from the training and testing datasets
inp_train <- read.csv(file="data/train.csv", header=TRUE, sep=",", quote="\"",
stringsAsFactors=FALSE, na.strings=c("NA",""))
inp_test <- read.csv(file="data/test.csv", header=TRUE, sep=",", quote="\"",
stringsAsFactors=FALSE, na.strings=c("NA",""))
rm(list=ls())
path <- "C://Users//Abhijeet//Documents//GitHub//Kaggle//Titanic_Machine_Learning_from_Disaster//My Implementation"
if (getwd() != path) {setwd(path)}
# Step 1
## Fetching data from the training and testing datasets
inp_train <- read.csv(file="data/train.csv", header=TRUE, sep=",", quote="\"",
stringsAsFactors=FALSE, na.strings=c("NA",""))
inp_test <- read.csv(file="data/test.csv", header=TRUE, sep=",", quote="\"",
stringsAsFactors=FALSE, na.strings=c("NA",""))
train <-  subset(inp_train, select= -c(PassengerId))
# There are some columns which are more meaningful if we convert them to factors.
train$Survived <- factor(train$Survived, levels = c("0", "1"),
labels = c("Not_Survived", "Survived"))
train$Pclass <- factor(train$Pclass)
train$Sex <- factor(train$Sex)
train$Embarked <- factor(train$Embarked)
first_name <- gsub("[A-Za-z '-]*, ", "", train$Name)
Title <- gsub("[. *] .*","",first_name)
# View(data.frame(train$Name, gsub("[A-Za-z '-]*, ", "", train$Name), gsub("[. *] .*","",gsub("[A-Za-z '-]*, ", "", train$Name))))
prop.table(table(Title, train$Sex, train$Survived), 1)
Title[Title=="Col" || Title=="Capt" || Title=="Major"] <- "Army"
Title[Title=="Sir"|| Title=="Don" || Title=="Jonkheer" || Title=="Dona" ||
Title=="the Countess"] <- "Royal"
Title[Title=="Rev"] <- "Priest"
Title[Title=="Dr"] <- "Doctor"
unique(Title)
first_name <- gsub("[A-Za-z '-]*, ", "", train$Name)
Title <- gsub("[. *] .*","",first_name)
Title[Title=="Col" || Title=="Capt" || Title=="Major"]
Title[Title=="Col" | Title=="Capt" | Title=="Major"]
Title[Title=="Col" | Title=="Capt" | Title=="Major"] <- "Army"
Title[Title=="Sir"| Title=="Don" | Title=="Jonkheer" | Title=="Dona" |
Title=="the Countess"] <- "Royal"
unique(Title)
Title[Title=="Sir"| Title=="Don" | Title=="Jonkheer" | Title=="Dona" |
Title=="the Countess" | Title=="Lady"] <- "Royal"
unique(Title)
Title[Title=="Miss" | Title=="Mlle"] <- "Unmarried Female"
unique(Title)
Ttle=="Ms"
Title=="Ms"
which(Title=="Ms")
train[444,]
train[which(Title=="Miss"),]
train[which(Title=="Unmarried Female"),]
train[which(Title=="Unmarried Female"),]$Age
summary(train[which(Title=="Unmarried Female"),]$Age)
first_name <- gsub("[A-Za-z '-]*, ", "", train$Name)
Title <- gsub("[. *] .*","",first_name)
summary(train[which(Title=="Ms"),]$Age)
summary(train[which(Title=="Miss"),]$Age)
summary(train[which(Title=="Mlle"),]$Age)
summary(train[which(Title=="Mme"),]$Age)
unique(Title)
summary(train[which(Title=="Mrs"),]$Age)
Title[Title=="Col" | Title=="Capt" | Title=="Major"] <- "Army"
Title[Title=="Sir"| Title=="Don" | Title=="Jonkheer" | Title=="Dona" |
Title=="the Countess" | Title=="Lady"] <- "Royal"
Title[Title=="Miss" | Title=="Mlle" | Title=="Ms"] <- "Non-royal Unmarried Female"
Title[Title=="Mrs" | Title=="Mme"] <- "Non-royal Married Female"
unique(Title)
prop.table(table(Title, train$Sex, train$Survived), 1)
train$Title <- as.factor(Title)
prop.table(table(Title, train$Sex, train$Survived), 1)
prop.table(table(train$Title, train$Sex, train$Survived), 1)
train <- subset(train, select= -c(Cabin, Name, Ticket))
na_Embarked <- which(is.na(train$Embarked))
train <- train[-na_Embarked,]
na_Age <- which(is.na(train$Age))
train.woNA <- train[-na_Age,]
train.na <- train[na_Age,]
library(caret)
set.seed(123)
fit1 <- lm(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title,
data=train.woNA)
predFit1 <- predict(fit1, train.woNA[,-c(1, 4)])
set.seed(123)
fit2 <- lm(Age ~ Pclass + Sex + SibSp + Fare + Embarked + Title, data=train.woNA)
predFit2 <- predict(fit2, subset(train.woNA, select=c(Pclass, Sex, SibSp, Fare,
Embarked, Title)))
set.seed(123)
fit3 <- lm(Age ~ Pclass + Sex + SibSp + Fare + Title, data=train.woNA)
predFit3 <- predict(fit3, subset(train.woNA, select=c(Pclass, Sex, SibSp, Fare,
Title)))
set.seed(123)
fit4 <- lm(Age ~ Pclass + Sex + SibSp + Title, data=train.woNA)
predFit4 <- predict(fit4, subset(train.woNA, select=c(Pclass, Sex, SibSp, Title)))
set.seed(123)
# Using step function
step(fit1, ~.^2)
set.seed(123)
fit5 <- lm(formula = Age ~ Pclass + SibSp + Parch + Fare + Embarked + Title +
Parch:Title + SibSp:Parch, data = train.woNA)
predFit5 <- predict(fit5, train.woNA)
anova(fit1, fit2, fit3, fit4, fit5)
par(mfrow=c(2,2))
plot(fit5)
par(mfrow=c(1,1))
set.seed(123)
fit6 <- train(Age ~., data=train.woNA[,-1], method="rf")
predFit6 <- predict(fit6, train.woNA)
set.seed(123)
fit7 <- rpart(Age ~ ., data=train.woNA)
predFit7 <- predict(fit7, train.woNA)
fancyRpartPlot(fit7)
df <- data.frame(predFit1, predFit2, predFit3, predFit4, predFit5, predFit6,
predFit7, train.woNA$Age)
View(df)
age_Ensemble_df <- data.frame(pStep=predFit5, pForest=predFit6, Age=train.woNA$Age)
set.seed(123)
fit8 <- train(Age ~., method="gbm", data=age_Ensemble_df)
predFit8 <- predict(fit8, age_Ensemble_df[,-3])
df <- data.frame(predFit5, predFit6, predFit8, train.woNA$Age)
df <- data.frame(predFit5, predFit6, predFit8, train.woNA$Age)
View(df)
set.seed(123)
# Using step function
step(fit1, ~.^2)
df <- data.frame(predFit5, predFit6, predFit8, train.woNA$Age)
View(df)
na_age_pred5 <- predict(fit5, train.na[,-4])
na_age_pred6 <- predict(fit6, train.na[,-4])
na_age_Ensemble_df <- data.frame(pStep=na_age_pred5, pForest=na_age_pred6)
age_predictions <- predict(fit8, na_age_Ensemble_df)
sum(age_predictions < 0)
train$Age[na_Age] <- age_predictions
summary(train)
train$AgeGroup <- cut(train$Age, breaks = c(0, 8, 13, 18, 60, Inf), labels = c("Child", "Teenager", "Young Adult", "Adult", "Elder"), right=FALSE)
prop.table(table(train$AgeGroup, train$Survived),1)
ggplot(data=train, aes(AgeGroup, fill=Survived)) + geom_histogram(binwidth=1)
library(caret)
train <- subset(train, select=-AgeGroup)
set.seed(123) # setting seed for reproducibility
# We first divide the training set into two parts in 60:40 ratio.
inTrain <- createDataPartition(y=train$Survived, p = 0.6, list=FALSE)
training.train <- train[inTrain,]
rest_train <- train[-inTrain,]
set.seed(123) # setting seed for reproducibility
# We now divide the rest of the training set into two parts in 50:50 ratio.
# This splits the original training set in a 60:20:20 ratio.
inTest <- createDataPartition(y=rest_train$Survived, p = 0.5, list=FALSE)
# 20% data for validation set to select best classifier
training.classifier_valid <- rest_train[inTest,]
# 20% data for validation set to calculate out-of-sample errors
training.oos_valid <- rest_train[-inTest,]
head(train)
library(klaR)
par(mfrow=c(1,1))
# Decision Trees
set.seed(123)
tree_Model <- train(Survived ~ ., data=training.train, method="rpart")
pred_Tree <- predict(tree_Model, newdata=training.classifier_valid[,-1])
conf_Tree <- confusionMatrix(pred_Tree, training.classifier_valid$Survived)
# Decision Tree Plot
library(rattle)
fancyRpartPlot(tree_Model$finalModel)
set.seed(123)
forest_Model <- train(Survived ~ ., data=training.train, method="rf")
pred_Forest <- predict(forest_Model, newdata=training.classifier_valid[,-1])
conf_Forest <- confusionMatrix(pred_Forest, training.classifier_valid$Survived)
set.seed(123)
naiveB_Model <- NaiveBayes(Survived ~ ., data=training.train)
pred_naiveB <- predict(naiveB_Model, newdata=training.classifier_valid[,-1])
conf_naiveB <- confusionMatrix(pred_naiveB$class, training.classifier_valid$Survived)
df_Ensemble <- data.frame(pTree=pred_Tree, pForest=pred_Forest,
pNaive=pred_naiveB$class,
Survived=training.classifier_valid$Survived)
set.seed(123)
ensemble_Model <- train(Survived ~., method="gbm", data=df_Ensemble)
pred_Ensemble <- predict(ensemble_Model, df_Ensemble[,-4])
conf_Ensemble <- confusionMatrix(pred_Ensemble, df_Ensemble$Survived)
set.seed(123)
boost_Model <- train(Survived ~., method="gbm", data=training.train)
pred_Boost <- predict(boost_Model, newdata=training.classifier_valid[,-1])
conf_Boost <- confusionMatrix(pred_Boost, training.classifier_valid$Survived)
compare_df <- data.frame(Accuracy = c(conf_Tree$overall[1],
conf_Forest$overall[1],
conf_naiveB$overall[1],
conf_Ensemble$overall[1],
conf_Boost$overall[1]),
row.names = c("rpart", "rf", "NaiveB", "Ensemble", "Boost"))
compare_df
pred_Tree_oos <- predict(tree_Model, newdata=training.oos_valid[,-1])
conf_Tree_oos <- confusionMatrix(pred_Tree_oos, training.oos_valid$Survived)
pred_Forest_oos <- predict(forest_Model, newdata=training.oos_valid[,-1])
conf_Forest_oos <- confusionMatrix(pred_Forest_oos, training.oos_valid$Survived)
pred_naiveB_oos <- predict(naiveB_Model, newdata=training.oos_valid[,-1])
conf_naiveB_oos <- confusionMatrix(pred_naiveB_oos$class, training.oos_valid$Survived)
df_ensemble_oos <- data.frame(pTree=pred_Tree_oos, pForest=pred_Forest_oos,
pNaive=pred_naiveB_oos$class,
Survived=training.oos_valid$Survived)
pred_Ensemble_oos <- predict(ensemble_Model, df_ensemble_oos[,-4])
conf_Ensemble_oos <- confusionMatrix(pred_Ensemble_oos, df_ensemble_oos$Survived)
pred_Boost_oos <- predict(boost_Model, newdata=training.oos_valid[,-1])
conf_Boost_oos <- confusionMatrix(pred_Boost_oos, training.oos_valid$Survived)
compare_df_oos <- data.frame(Accuracy = c(conf_Tree_oos$overall[1],
conf_Forest_oos$overall[1],
conf_naiveB_oos$overall[1],
conf_Ensemble_oos$overall[1],
conf_Boost_oos$overall[1]),
row.names = c("rpart", "rf", "NaiveB", "Ensemble", "Boost"))
compare_df_oos
test <- inp_test
first_name <- gsub("[A-Za-z '-]*, ", "", test$Name)
Title <- gsub("[. *] .*","",first_name)
# View(data.frame(test$Name, gsub("[A-Za-z '-]*, ", "", test$Name), gsub("[. *] .*","",gsub("[A-Za-z '-]*, ", "", test$Name))))
View(data.frame(test$Name, gsub("[A-Za-z '-]*, ", "", test$Name), gsub("[. *] .*","",gsub("[A-Za-z '-]*, ", "", test$Name))))
Title[Title=="Col" | Title=="Capt" | Title=="Major"] <- "Army"
Title[Title=="Sir"| Title=="Don" | Title=="Jonkheer" | Title=="Dona" |
Title=="the Countess" | Title=="Lady"] <- "Royal"
Title[Title=="Miss" | Title=="Mlle" | Title=="Ms"] <- "Non-royal Unmarried Female"
Title[Title=="Mrs" | Title=="Mme"] <- "Non-royal Married Female"
train$Title <- as.factor(Title)
head(train)
dim(train)
test$Title <- as.factor(Title)
test$Title <- as.factor(Title)
prop.table(table(test$Title, test$Sex), 1)
test <- subset(test, select = -c(Name, Ticket, Cabin))
test$Pclass <- factor(test$Pclass)
test$Sex <- factor(test$Sex)
test$Embarked <- factor(test$Embarked)
test$Fare[which(is.na(test$Fare))] <- 0
na_Age <- which(is.na(test$Age))
test.na <- test[na_Age,]
# Predicting the age in the test set using the fit8 model
test_na_age_pred5 <- predict(fit5, test.na[,-c(1,4)])
test_na_age_pred6 <- predict(fit6, test.na[,-c(1,4)])
test_na_age_Ensemble_df <- data.frame(pStep=test_na_age_pred5,
pForest=test_na_age_pred6)
test_age_predictions <- predict(fit8, test_na_age_Ensemble_df)
# sum(test_age_predictions < 0) # only fit6 has sum = 0
test$Age[na_Age] <- test_age_predictions
head(test)
str(test)
str(train)
summary(test)
set.seed(123)
forest_Model <- train(Survived ~ ., data=train, method="rf")
pred_Forest_test <- predict(forest_Model, newdata=test)
# converting factor to numeric(Not_Survived=0, Survived=1)
final_pred <- as.numeric(pred_Forest_test=="Survived")
df <- data.frame(PassengerId=test$PassengerId, Survived=final_pred)
write.csv(df, file="prediction_rf.csv", row.names=FALSE)
set.seed(123)
tree_Model <- train(Survived ~ ., data=train, method="rpart")
pred_Tree_test <- predict(tree_Model, newdata=test)
fancyRpartPlot(tree_Model$finalModel)
final_pred <- as.numeric(pred_Tree_test=="Survived")
df <- data.frame(PassengerId=test$PassengerId, Survived=final_pred)
write.csv(df, file="prediction_tree.csv", row.names=FALSE)
set.seed(123)
naiveB_Model <- NaiveBayes(Survived ~ ., data=train)
pred_naiveB_test <- predict(naiveB_Model, newdata=test)
# converting factor to numeric(Not_Survived=0, Survived=1)
final_pred <- as.numeric(pred_naiveB_test$class=="Survived")
df <- data.frame(PassengerId=test$PassengerId, Survived=final_pred)
write.csv(df, file="prediction_naiveB.csv", row.names=FALSE)
df_Ensemble_test <- data.frame(pTree=pred_Tree_test, pForest=pred_Forest_test,
pNaive=pred_naiveB_test$class)
pred_Ensemble_test <- predict(ensemble_Model, newdata=df_Ensemble_test)
# converting factor to numeric(Not_Survived=0, Survived=1)
final_pred <- as.numeric(pred_Ensemble_test=="Survived")
df <- data.frame(PassengerId=test$PassengerId, Survived=final_pred)
write.csv(df, file="prediction_ensemble.csv", row.names=FALSE)
set.seed(123)
boost_Model <- train(Survived ~., method="gbm", data=train)
pred_Boost_test <- predict(boost_Model, newdata=test)
# converting factor to numeric(Not_Survived=0, Survived=1)
final_pred <- as.numeric(pred_Boost_test=="Survived")
df <- data.frame(PassengerId=test$PassengerId, Survived=final_pred)
write.csv(df, file="prediction_boost.csv", row.names=FALSE)
cont <- rpart.control(minsplit=50, cp=0)
my_tree_three <- rpart(formula=Survived ~ ., data=train, method="class", control=cont)
pred_tree_test <- predict(my_tree_three, newdata=test, type="class")
fancyRpartPlot(my_tree_three)
pred_tree_test
final_pred <- as.numeric(pred_tree_test=="Survived")
df <- data.frame(PassengerId=test$PassengerId, Survived=final_pred)
write.csv(df, file="prediction_tree_control.csv", row.names=FALSE)
